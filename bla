
#include <float.h>

#define EPSILON 1E-10

typedef union u_object	t_object;

typedef enum e_obj
{
	sphere_obj,
	plane_obj,
	cylinder_obj,
	disk_obj,
	triangle_obj,
	box_obj,
	arbbox_obj,
	mesh_obj,
}	t_obj_e;


typedef struct s_ray
{
	t_vec3	origin;
	t_vec3	direction;
	float	transparency;
}			t_ray;

typedef struct s_vec3
{
	float	x;
	float	y;
	float	z;
}			t_vec3;

typedef struct s_vec4
{
	float	v;
	float	x;
	float	y;
	float	z;
}			t_vec4;

typedef struct s_box
{
	t_obj_e			type;
	t_vec3			verts[2];
	t_vec3			normal;
	t_vec4			colour;
}					t_box;

typedef union u_object
{
	t_obj_e		type;
	t_box		box;
}				t_object;

t_vec3	vec3_compmult(const t_vec3 v, const t_vec3 u)
{
	t_vec3	res;

	res.x = v.x * u.x;
	res.y = v.y * u.y;
	res.z = v.z * u.z;
	return (res);
}

t_vec3	vec3_inv(const t_vec3 v)
{
	t_vec3	res;

	res = (t_vec3){FLT_MAX, FLT_MAX, FLT_MAX};
	if (v.x > EPSILON)
		res.x = 1.0 / v.x;
	if (v.x > EPSILON)
		res.y = 1.0 / v.y;
	if (v.x > EPSILON)
		res.z = 1.0 / v.z;
	return (res);
}